/*        Generated by TAPENADE     (INRIA, Ecuador team)
    Tapenade 3.13 (r6666M) -  1 Mar 2018 15:30
*/
/*
  Differentiation of vec_add in reverse (adjoint) mode:
   gradient     of useful results: alloc(*res) *x *y
   with respect to varying inputs: alloc(*res) *x *y
   RW status of diff variables: alloc(*res):in-out *x:incr *y:incr
   Plus diff mem management of: x:in y:in
*/
void vec_add_b(int n, double *x, double *xb, double *y, double *yb, double *
        vec_addb) {
    double *res;
    double *resb;
    int ii1;
    double *vec_add;
    resb = (double *)malloc(n*sizeof(double));
    for (ii1 = 0; ii1 < n; ++ii1)
        resb[ii1] = 0.0;
    res = (double *)malloc(n*sizeof(double));
    resb = vec_addb;
    vec_addb = (void *)0;
    for (int i = n-1; i > -1; --i) {
        xb[i] = xb[i] + resb[i];
        yb[i] = yb[i] + resb[i];
        resb[i] = 0.0;
    }
    free(res);
    free(resb);
}
/*
  Differentiation of vec_elem_mult in reverse (adjoint) mode:
   gradient     of useful results: alloc(*res) *x *y
   with respect to varying inputs: alloc(*res) *x *y
   RW status of diff variables: alloc(*res):in-out *x:incr *y:incr
   Plus diff mem management of: x:in y:in
*/
void vec_elem_mult_b(int n, double *x, double *xb, double *y, double *yb, 
        double *vec_elem_multb) {
    double *res;
    double *resb;
    int ii1;
    double *vec_elem_mult;
    resb = (double *)malloc(n*sizeof(double));
    for (ii1 = 0; ii1 < n; ++ii1)
        resb[ii1] = 0.0;
    res = (double *)malloc(n*sizeof(double));
    resb = vec_elem_multb;
    vec_elem_multb = (void *)0;
    for (int i = n-1; i > -1; --i) {
        xb[i] = xb[i] + y[i]*resb[i];
        yb[i] = yb[i] + x[i]*resb[i];
        resb[i] = 0.0;
    }
    free(res);
    free(resb);
}

/*
  Differentiation of vec_scal_mult in reverse (adjoint) mode:
   gradient     of useful results: alloc(*res) y
   with respect to varying inputs: alloc(*res) y
   RW status of diff variables: alloc(*res):in-out y:incr
*/
void vec_scal_mult_b(int n, double *x, double y, double *yb, double *
        vec_scal_multb) {
    double *res;
    double *resb;
    int ii1;
    double *vec_scal_mult;
    // resb = (double *)malloc(n*sizeof(double));
    // for (ii1 = 0; ii1 < n; ++ii1)
    //     resb[ii1] = 0.0;
    res = (double *)malloc(n*sizeof(double));
    resb = vec_scal_multb;
    // vec_scal_multb = (void *)0;
    for (int i = n-1; i > -1; --i) {
        *yb = *yb + x[i]*2*y*resb[i];
        resb[i] = 0.0;
    }
    free(res);
    // free(resb);
}
