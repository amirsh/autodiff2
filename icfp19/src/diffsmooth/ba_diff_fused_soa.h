#ifndef __USECASES_BA_D_H__ 
#define __USECASES_BA_D_H__ 
#include "fsharp.h"
#include <stdio.h>
#include <math.h>

array_number_t TOP_LEVEL_usecases_ba_project_d(array_number_t cam, array_number_t x, array_number_t camd, array_number_t xd) {
  number_t x6074 = (cam->arr[0]);
  number_t x6072 = (camd->arr[0]);
  number_t x6070 = (x6074) * (x6074);
  number_t x6066 = (x6072) * (x6074);
  number_t x6067 = (x6074) * (x6072);
  number_t x6068 = (x6066) + (x6067);
  number_t x6064 = (0) + (x6070);
  number_t x6062 = (0) + (x6068);
  number_t x6060 = (cam->arr[1]);
  number_t x6058 = (camd->arr[1]);
  number_t x6056 = (x6060) * (x6060);
  number_t x6052 = (x6058) * (x6060);
  number_t x6053 = (x6060) * (x6058);
  number_t x6054 = (x6052) + (x6053);
  number_t x6050 = (x6064) + (x6056);
  number_t x6048 = (x6062) + (x6054);
  number_t x6046 = (cam->arr[2]);
  number_t x6044 = (camd->arr[2]);
  number_t x6042 = (x6046) * (x6046);
  number_t x6038 = (x6044) * (x6046);
  number_t x6039 = (x6046) * (x6044);
  number_t x6040 = (x6038) + (x6039);
  number_t x6036 = (x6050) + (x6042);
  number_t x6034 = (x6048) + (x6040);
  index_t x5673 = (x6036) != (0);
  tuple_array_number_t_array_number_t x6032;
  if (x5673) {
    number_t x5937 = sqrt(x6036);
    number_t x5933 = (1) / (x5937);
    number_t x5934 = (x5933) * (0.5);
    number_t x5935 = (x6034) * (x5934);
    number_t x5927 = -(x5935);
    number_t x5928 = (x5937) * (x5937);
    number_t x5929 = (x5927) / (x5928);
    number_t x5925 = (x->arr[5]);
    number_t x5923 = (xd->arr[5]);
    number_t x5921 = (cam->arr[5]);
    number_t x5919 = (camd->arr[5]);
    number_t x5917 = (x6060) * (x5933);
    number_t x5913 = (x6058) * (x5933);
    number_t x5914 = (x6060) * (x5929);
    number_t x5915 = (x5913) + (x5914);
    number_t x5911 = (x5925) - (x5921);
    number_t x5909 = (x5923) - (x5919);
    number_t x5907 = (x->arr[4]);
    number_t x5905 = (xd->arr[4]);
    number_t x5903 = (cam->arr[4]);
    number_t x5901 = (camd->arr[4]);
    number_t x5899 = (x6046) * (x5933);
    number_t x5895 = (x6044) * (x5933);
    number_t x5896 = (x6046) * (x5929);
    number_t x5897 = (x5895) + (x5896);
    number_t x5893 = (x5907) - (x5903);
    number_t x5891 = (x5905) - (x5901);
    number_t x5889 = (x5917) * (x5911);
    number_t x5885 = (x5915) * (x5911);
    number_t x5886 = (x5917) * (x5909);
    number_t x5887 = (x5885) + (x5886);
    number_t x5883 = (x5899) * (x5893);
    number_t x5879 = (x5897) * (x5893);
    number_t x5880 = (x5899) * (x5891);
    number_t x5881 = (x5879) + (x5880);
    number_t x5877 = (x->arr[3]);
    number_t x5875 = (xd->arr[3]);
    number_t x5873 = (cam->arr[3]);
    number_t x5871 = (camd->arr[3]);
    number_t x5869 = (x5877) - (x5873);
    number_t x5867 = (x5875) - (x5871);
    number_t x5865 = (x6074) * (x5933);
    number_t x5861 = (x6072) * (x5933);
    number_t x5862 = (x6074) * (x5929);
    number_t x5863 = (x5861) + (x5862);
    number_t x5859 = (x5899) * (x5869);
    number_t x5855 = (x5897) * (x5869);
    number_t x5856 = (x5899) * (x5867);
    number_t x5857 = (x5855) + (x5856);
    number_t x5853 = (x5865) * (x5911);
    number_t x5849 = (x5863) * (x5911);
    number_t x5850 = (x5865) * (x5909);
    number_t x5851 = (x5849) + (x5850);
    number_t x5847 = (x5865) * (x5893);
    number_t x5843 = (x5863) * (x5893);
    number_t x5844 = (x5865) * (x5891);
    number_t x5845 = (x5843) + (x5844);
    number_t x5841 = (x5917) * (x5869);
    number_t x5837 = (x5915) * (x5869);
    number_t x5838 = (x5917) * (x5867);
    number_t x5839 = (x5837) + (x5838);
    number_t x5835 = (x5889) - (x5883);
    number_t x5833 = (x5887) - (x5881);
    number_t x5831 = (x5859) - (x5853);
    number_t x5829 = (x5857) - (x5851);
    number_t x5827 = (x5847) - (x5841);
    number_t x5825 = (x5845) - (x5839);
    array_number_t x5823 = (array_number_t)storage_alloc(sizeof(int) * 2);x5823->length=3;x5823->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
    x5823->arr[0] = x5835;
    x5823->arr[1] = x5831;
    x5823->arr[2] = x5827;
    array_number_t x5821 = (array_number_t)storage_alloc(sizeof(int) * 2);x5821->length=3;x5821->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
    x5821->arr[0] = x5833;
    x5821->arr[1] = x5829;
    x5821->arr[2] = x5825;
    number_t x5807 = (x5865) * (x5869);
    number_t x5803 = (x5863) * (x5869);
    number_t x5804 = (x5865) * (x5867);
    number_t x5805 = (x5803) + (x5804);
    number_t x5801 = (0) + (x5807);
    number_t x5799 = (0) + (x5805);
    number_t x5785 = (x5917) * (x5893);
    number_t x5781 = (x5915) * (x5893);
    number_t x5782 = (x5917) * (x5891);
    number_t x5783 = (x5781) + (x5782);
    number_t x5779 = (x5801) + (x5785);
    number_t x5777 = (x5799) + (x5783);
    number_t x5763 = (x5899) * (x5911);
    number_t x5759 = (x5897) * (x5911);
    number_t x5760 = (x5899) * (x5909);
    number_t x5761 = (x5759) + (x5760);
    number_t x5757 = (x5779) + (x5763);
    number_t x5755 = (x5777) + (x5761);
    number_t x5753 = cos(x5937);
    number_t x5749 = sin(x5937);
    number_t x5750 = -(x5749);
    number_t x5751 = (x5935) * (x5750);
    number_t x5747 = (1) - (x5753);
    number_t x5745 = -(x5751);
    index_t x5674 = (x)->length;
    array_number_t x5743__1 = (array_number_t)storage_alloc(sizeof(int) * 2);x5743__1->length=x5674;x5743__1->arr = (number_t*)storage_alloc(sizeof(number_t) * x5674);
    array_number_t x5743__2 = (array_number_t)storage_alloc(sizeof(int) * 2);x5743__2->length=x5674;x5743__2->arr = (number_t*)storage_alloc(sizeof(number_t) * x5674);
    tuple_array_number_t_array_number_t x5743 = {._1 = x5743__1, ._2 = x5743__2};
    for(int x5055 = 0; x5055 < x5743__1->length; x5055++) {
      index_t x5741 = (x5055) + (3);
      number_t x5739 = (x->arr[x5741]);
      number_t x5737 = (xd->arr[x5741]);
      number_t x5735 = (cam->arr[x5741]);
      number_t x5733 = (camd->arr[x5741]);
      number_t x5731 = (x5739) - (x5735);
      number_t x5729 = (x5737) - (x5733);
      number_t x5727 = (x5823->arr[x5055]);
      number_t x5725 = (x5821->arr[x5055]);
      number_t x5721 = (x5935) * (x5753);
      number_t x5717 = (x5731) * (x5753);
      number_t x5713 = (x5729) * (x5753);
      number_t x5714 = (x5731) * (x5751);
      number_t x5715 = (x5713) + (x5714);
      number_t x5711 = (x5727) * (x5749);
      number_t x5707 = (x5725) * (x5749);
      number_t x5708 = (x5727) * (x5721);
      number_t x5709 = (x5707) + (x5708);
      number_t x5705 = (cam->arr[x5055]);
      number_t x5703 = (camd->arr[x5055]);
      number_t x5701 = (x5705) * (x5933);
      number_t x5697 = (x5703) * (x5933);
      number_t x5698 = (x5705) * (x5929);
      number_t x5699 = (x5697) + (x5698);
      number_t x5695 = (x5757) * (x5747);
      number_t x5691 = (x5755) * (x5747);
      number_t x5692 = (x5757) * (x5745);
      number_t x5693 = (x5691) + (x5692);
      number_t x5689 = (x5717) + (x5711);
      number_t x5687 = (x5715) + (x5709);
      number_t x5685 = (x5701) * (x5695);
      number_t x5681 = (x5699) * (x5695);
      number_t x5682 = (x5701) * (x5693);
      number_t x5683 = (x5681) + (x5682);
      number_t x5679 = (x5689) + (x5685);
      number_t x5677 = (x5687) + (x5683);
      tuple_number_t_number_t x5675 = (tuple_number_t_number_t){._1=x5679, ._2=x5677};
      tuple_number_t_number_t x5743__res = x5675;
      x5743__1->arr[x5055] = x5743__res._1;
      x5743__2->arr[x5055] = x5743__res._2;
    }
    x6032 = x5743;
  } else {
    index_t j = 1;
    index_t j0 = 2;
    number_t x6028 = (x->arr[5]);
    number_t x6026 = (xd->arr[5]);
    number_t x6024 = (cam->arr[5]);
    number_t x6022 = (camd->arr[5]);
    number_t x6020 = (x6028) - (x6024);
    number_t x6018 = (x6026) - (x6022);
    number_t x6016 = (x->arr[4]);
    number_t x6014 = (xd->arr[4]);
    number_t x6012 = (cam->arr[4]);
    number_t x6010 = (camd->arr[4]);
    number_t x6008 = (x6016) - (x6012);
    number_t x6006 = (x6014) - (x6010);
    number_t x6004 = (x6024) * (x6020);
    number_t x6000 = (x6022) * (x6020);
    number_t x6001 = (x6024) * (x6018);
    number_t x6002 = (x6000) + (x6001);
    number_t x5998 = (x6012) * (x6008);
    number_t x5994 = (x6010) * (x6008);
    number_t x5995 = (x6012) * (x6006);
    number_t x5996 = (x5994) + (x5995);
    number_t x5992 = (x->arr[3]);
    number_t x5990 = (xd->arr[3]);
    number_t x5988 = (cam->arr[3]);
    number_t x5986 = (camd->arr[3]);
    number_t x5984 = (x5992) - (x5988);
    number_t x5982 = (x5990) - (x5986);
    number_t x5980 = (x5988) * (x5984);
    number_t x5976 = (x5986) * (x5984);
    number_t x5977 = (x5988) * (x5982);
    number_t x5978 = (x5976) + (x5977);
    number_t x5974 = (x6004) - (x5998);
    number_t x5972 = (x6002) - (x5996);
    number_t x5970 = (x5980) - (x6004);
    number_t x5968 = (x5978) - (x6002);
    number_t x5966 = (x5998) - (x5980);
    number_t x5964 = (x5996) - (x5978);
    array_number_t x5962 = (array_number_t)storage_alloc(sizeof(int) * 2);x5962->length=3;x5962->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
    x5962->arr[0] = x5974;
    x5962->arr[1] = x5970;
    x5962->arr[2] = x5966;
    array_number_t x5960 = (array_number_t)storage_alloc(sizeof(int) * 2);x5960->length=3;x5960->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
    x5960->arr[0] = x5972;
    x5960->arr[1] = x5968;
    x5960->arr[2] = x5964;
    index_t x5939 = (x)->length;
    array_number_t x5958__1 = (array_number_t)storage_alloc(sizeof(int) * 2);x5958__1->length=x5939;x5958__1->arr = (number_t*)storage_alloc(sizeof(number_t) * x5939);
    array_number_t x5958__2 = (array_number_t)storage_alloc(sizeof(int) * 2);x5958__2->length=x5939;x5958__2->arr = (number_t*)storage_alloc(sizeof(number_t) * x5939);
    tuple_array_number_t_array_number_t x5958 = {._1 = x5958__1, ._2 = x5958__2};
    for(int x4619 = 0; x4619 < x5958__1->length; x4619++) {
      number_t x5956 = (x5962->arr[x4619]);
      number_t x5954 = (x5960->arr[x4619]);
      number_t x5952 = (x->arr[x4619]);
      number_t x5950 = (xd->arr[x4619]);
      number_t x5948 = (x5952) - (x5956);
      number_t x5946 = (x5950) - (x5954);
      number_t x5944 = (x5948) + (x5956);
      number_t x5942 = (x5946) + (x5954);
      tuple_number_t_number_t x5940 = (tuple_number_t_number_t){._1=x5944, ._2=x5942};
      tuple_number_t_number_t x5958__res = x5940;
      x5958__1->arr[x4619] = x5958__res._1;
      x5958__2->arr[x4619] = x5958__res._2;
    }
    x6032 = x5958;
  }
  array_number_t x5670 = (x6032)._1;
  number_t x5671 = (x5670->arr[2]);
  array_number_t x5667 = (x6032)._2;
  number_t x5668 = (x5667->arr[2]);
  number_t x5665 = (x5670->arr[0]);
  number_t x5662 = (x5667->arr[0]);
  number_t x5659 = (1) / (x5671);
  number_t x5655 = -(x5668);
  number_t x5656 = (x5671) * (x5671);
  number_t x5657 = (x5655) / (x5656);
  number_t x5653 = (x5665) * (x5659);
  number_t x5649 = (x5662) * (x5659);
  number_t x5650 = (x5665) * (x5657);
  number_t x5651 = (x5649) + (x5650);
  number_t x5647 = (x5653) * (x5653);
  number_t x5643 = (x5651) * (x5653);
  number_t x5644 = (x5653) * (x5651);
  number_t x5645 = (x5643) + (x5644);
  number_t x5641 = (0) + (x5647);
  number_t x5639 = (0) + (x5645);
  number_t x5637 = (x5670->arr[1]);
  number_t x5634 = (x5667->arr[1]);
  number_t x5631 = (x5637) * (x5659);
  number_t x5627 = (x5634) * (x5659);
  number_t x5628 = (x5637) * (x5657);
  number_t x5629 = (x5627) + (x5628);
  number_t x5625 = (x5631) * (x5631);
  number_t x5621 = (x5629) * (x5631);
  number_t x5622 = (x5631) * (x5629);
  number_t x5623 = (x5621) + (x5622);
  number_t x5619 = (x5641) + (x5625);
  number_t x5617 = (x5639) + (x5623);
  number_t x5615 = (cam->arr[9]);
  number_t x5613 = (camd->arr[9]);
  number_t x5611 = (x5615) * (x5619);
  number_t x5607 = (x5613) * (x5619);
  number_t x5608 = (x5615) * (x5617);
  number_t x5609 = (x5607) + (x5608);
  number_t x5605 = (cam->arr[10]);
  number_t x5603 = (camd->arr[10]);
  number_t x5601 = (x5605) * (x5619);
  number_t x5597 = (x5603) * (x5619);
  number_t x5598 = (x5605) * (x5617);
  number_t x5599 = (x5597) + (x5598);
  number_t x5595 = (1) + (x5611);
  number_t x5593 = (0) + (x5609);
  number_t x5591 = (x5601) * (x5619);
  number_t x5587 = (x5599) * (x5619);
  number_t x5588 = (x5601) * (x5617);
  number_t x5589 = (x5587) + (x5588);
  index_t j00 = 6;
  number_t x5584 = (x5595) + (x5591);
  number_t x5582 = (x5593) + (x5589);
  index_t x5548 = 2;
  array_number_t x5580 = (array_number_t)storage_alloc(sizeof(int) * 2);x5580->length=x5548;x5580->arr = (number_t*)storage_alloc(sizeof(number_t) * x5548);
  for(int i = 0; i < x5580->length; i++){
    index_t x5578 = (i) + (7);
    number_t x5576 = (x5670->arr[i]);
    number_t x5573 = (x5667->arr[i]);
    number_t x5570 = (cam->arr[x5578]);
    number_t x5568 = (camd->arr[x5578]);
    number_t x5566 = (x5576) * (x5570);
    number_t x5562 = (x5573) * (x5570);
    number_t x5563 = (x5576) * (x5568);
    number_t x5564 = (x5562) + (x5563);
    number_t x5560 = (x5566) * (x5584);
    number_t x5556 = (x5564) * (x5584);
    number_t x5557 = (x5566) * (x5582);
    number_t x5558 = (x5556) + (x5557);
    number_t x5554 = (x5560) * (x5570);
    number_t x5359 = x5554;
    number_t x5550 = (x5558) * (x5570);
    number_t x5551 = (x5560) * (x5568);
    number_t x5552 = (x5550) + (x5551);
    number_t x5549 = (x5568) + (x5552);
    x5580->arr[i] = x5549;
    
  }
  return x5580;
}

#endif